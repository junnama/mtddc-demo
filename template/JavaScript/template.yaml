--- 
blog_id: 1
build_dynamic: 0
build_interval: 0
build_type: 1
created_by: 1
created_on: '20151125203417'
current_revision: 0
gittree_id: 3
id: 2
identifier: javascript
linked_file: ~
linked_file_mtime: ~
linked_file_size: ~
meta: ~
modified_by: ~
modified_on: '20151125203417'
name: JavaScript
outfile: mt.js
rebuild_me: 1
text: "<mt:Ignore>\n/*  The following functions and variables are here to support legacy MT templates.\n    If you have refreshed your JavaScript template but still use older MT comment\n    templates, you may need to uncomment this block in order for those templates \n    to work properly. To use, simply remove the 'mt:Ignore' tags wrapping this\n    block of code.\n*/\n    function hideDocumentElement(id) { return mtHide(id) }\n    function showDocumentElement(id) { return mtShow(id) }\n    function individualArchivesOnLoad() { return mtEntryOnLoad() }\n    function writeCommenterGreeting() { return mtShowGreeting() }\n    function rememberMe(f) { return mtRememberMe(f) }\n    function forgetMe(f) { return mtForgetMe(f) }\n    var commenter_name;\n    var commenter_id;\n    var commenter_url;\n    var commenter_blog_ids;\n    var mtcmtmail;\n    var mtcmtauth;\n    var mtcmthome;\n    var captcha_timer;\n</mt:Ignore>\n\n// The cookie name to use for storing the blog-side comment session cookie.\nvar mtCookieName = \"<$mt:UserSessionCookieName$>\";\nvar mtCookieDomain = \"<$mt:UserSessionCookieDomain$>\";\nvar mtCookiePath = \"<$mt:UserSessionCookiePath$>\";\nvar mtCookieTimeout = <$mt:UserSessionCookieTimeout$>;\n\n<mt:Ignore>\n/***\n * Simple routine for showing a DOM element (applying a CSS display\n * attribute of 'none').\n */\n</mt:Ignore>\nfunction mtHide(id) {\n    var el = (typeof id == \"string\") ? document.getElementById(id) : id;\n    if (el) el.style.display = 'none';\n}\n\n<mt:Ignore>\n/***\n * Simple routine for showing a DOM element (applying a CSS display\n * attribute of 'block').\n */\n</mt:Ignore>\nfunction mtShow(id) {\n    var el = (typeof id == \"string\") ? document.getElementById(id) : id;\n    if (el) el.style.display = 'block';\n}\n\n<mt:Ignore>\n/***\n * A utility function for assigning/adding handlers to window events.\n */\n</mt:Ignore>\nfunction mtAttachEvent(eventName,func) {\n    var onEventName = 'on' + eventName;\n    var old = window[onEventName];\n    if( typeof old != 'function' )\n        window[onEventName] = func;\n    else {\n        window[onEventName] = function( evt ) {\n            old( evt );\n            return func( evt );\n        };\n    }\n}\n\n<mt:Ignore>\n/***\n * Calls the event named, if there are handlers for it.\n */\n</mt:Ignore>\nfunction mtFireEvent(eventName,param) {\n    var fn = window['on' + eventName];\n    if (typeof fn == 'function') return fn(param);\n    return;\n}\n\nif(!this.JSON){JSON={};}(function(){function f(n){return n<10?'0'+n:n;}if(typeof Date.prototype.toJSON!=='function'){Date.prototype.toJSON=function(key){return this.getUTCFullYear()+'-'+f(this.getUTCMonth()+1)+'-'+f(this.getUTCDate())+'T'+f(this.getUTCHours())+':'+f(this.getUTCMinutes())+':'+f(this.getUTCSeconds())+'Z';};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf();};}var cx=/[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,escapable=/[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,gap,indent,meta={'\\b':'\\\\b','\\t':'\\\\t','\\n':'\\\\n','\\f':'\\\\f','\\r':'\\\\r','\"':'\\\\\"','\\\\':'\\\\\\\\'},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?'\"'+string.replace(escapable,function(a){var c=meta[a];return typeof c==='string'?c:'\\\\u'+('0000'+a.charCodeAt(0).toString(16)).slice(-4);})+'\"':'\"'+string+'\"';}function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&&typeof value==='object'&&typeof value.toJSON==='function'){value=value.toJSON(key);}if(typeof rep==='function'){value=rep.call(holder,key,value);}switch(typeof value){case'string':return quote(value);case'number':return isFinite(value)?String(value):'null';case'boolean':case'null':return String(value);case'object':if(!value){return'null';}gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==='[object Array]'){length=value.length;for(i=0;i<length;i+=1){partial[i]=str(i,value)||'null';}v=partial.length===0?'[]':gap?'[\\n'+gap+partial.join(',\\n'+gap)+'\\n'+mind+']':'['+partial.join(',')+']';gap=mind;return v;}if(rep&&typeof rep==='object'){length=rep.length;for(i=0;i<length;i+=1){k=rep[i];if(typeof k==='string'){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}}else{for(k in value){if(Object.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}}v=partial.length===0?'{}':gap?'{\\n'+gap+partial.join(',\\n'+gap)+'\\n'+mind+'}':'{'+partial.join(',')+'}';gap=mind;return v;}}if(typeof JSON.stringify!=='function'){JSON.stringify=function(value,replacer,space){var i;gap='';indent='';if(typeof space==='number'){for(i=0;i<space;i+=1){indent+=' ';}}else if(typeof space==='string'){indent=space;}rep=replacer;if(replacer&&typeof replacer!=='function'&&(typeof replacer!=='object'||typeof replacer.length!=='number')){throw new Error('JSON.stringify');}return str('',{'':value});};}if(typeof JSON.parse!=='function'){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&&typeof value==='object'){for(k in value){if(Object.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v;}else{delete value[k];}}}}return reviver.call(holder,key,value);}cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return'\\\\u'+('0000'+a.charCodeAt(0).toString(16)).slice(-4);});}if(/^[\\],:{}\\s]*$/.test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,'@').replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,']').replace(/(?:^|:|,)(?:\\s*\\[)+/g,''))){j=eval('('+text+')');return typeof reviver==='function'?walk({'':j},''):j;}throw new SyntaxError('JSON.parse');};}}());\n\nvar MT = window.MT || {};\n\nMT.cons = function () {\n  return {\n    LOG : 'log',\n    WARN : 'warn',\n    DEBUG : 'debug',\n    INFO : 'info',\n    ERR : 'error',\n    JSON : 'json'\n  };\n}();\n\n<mt:Ignore>\n/**\n * Used for base functionality related to MT\n * \n * @package MT\n * @class core\n * @global\n * @param {Object} o optional configuration object\n * Options:\n */\n</mt:Ignore>\nMT.core = function (o) {\n  var _debug = false;\n  \n  return {\n    <mt:Ignore>\n    /**\n     * Makes remote call and handles response\n     * \n     * @param {String} url The URL endpoint\n     * @param {String} respType The type of response expected\n     * @param {Function} respHandler The function to handle the response\n     * @return void\n     */\n    </mt:Ignore>\n    connect : function (url,respType,respHandler) {\n      var xh = mtGetXmlHttp();\n      if (!xh) return false;\n      \n      xh.onreadystatechange = function() {\n        if ( xh.readyState == 4 ) {\n          if ( xh.status && ( xh.status != 200 ) ) {\n            // error - ignore\n          } else {\n            switch (respType) {\n              case 'json':\n                respHandler(JSON.parse(xh.responseText));\n                break;\n                \n              case 'xml':\n                break;\n                \n              case 'text':\n                break;\n            }\n          }\n        }\n      };\n      \n      xh.open('GET',url);\n      xh.send(null);\n    },\n    \n    getEl : function (el) {\n      return MT.util.checkNodeType(el)==='element' ? id : (document.getElementById(el) || false);\n    },\n    \n    addEvent : function (el,type,func,obj) {\n      if(!obj && document.addEventListener) {\n        el.addEventListener(type,func,false);\n      } else if(obj && document.addEventListener) {\n        el.addEventListener(type,function () {\n          func.call(obj,event);\n        },false);\n      } else {\n        if(obj) {\n          el.attachEvent('on' + type,function () {\n            func.call(obj,event);\n          });\n        } else {\n          el.attachEvent('on' + type,function () {          \n            func.call(el,event);\n          });\n        }\n      }\n    },\n    \n    <mt:Ignore>\n    /**\n     * Basic logging function\n     * \n     * @param {String} level The log level (WARN|DEBUG|INFO|ERROR|LOG)\n     * Specified by one of the MT constants\n     * @param {String} msg The log message\n     * @return void\n     */\n    </mt:Ignore>\n    log : function (level,msg) {\n      if(_debug && window.console) {\n        switch(level) {\n          case 'warn':\n          case 'debug':\n          case 'info':\n          case 'error':\n          case 'log':\n            console[level](msg);\n            break;\n            \n          default:\n            return false; \n        }\n      } else {\n        return false;\n      }\n    }\n  }\n}();\n\n<mt:Ignore>\n/**\n * Utilities class\n * \n * @package MT\n * @class util\n * @global\n * Options:\n */\n</mt:Ignore>\nMT.util = function () {\n  return {\n    toggleVisibility : {\n      show : function () {\n        var i = arguments.length;\n        \n        while(i--) {\n          if(MT.util.checkNodeType(arguments[i])==='element') {\n            arguments[i].style.visibility = 'visible';\n          } else {\n            MT.core.getEl(arguments[i]).style.visibility = 'visible';\n          }\n        }\n      },\n      \n      hide : function () {\n        var i = arguments.length;\n        while(i--) {\n          if(MT.util.checkNodeType(arguments[i])==='element') {\n            arguments[i].style.visibility = 'hidden';\n          } else {\n            MT.core.getEl(arguments[i]).style.visibility = 'hidden';\n          }\n        }\n      }\n    },\n    \n    toggleDisplay : {\n      show : function () {\n        var i = arguments.length;\n        while(i--) {\n          if(MT.util.checkNodeType(arguments[i])==='element') {\n            arguments[i].style.display = '';\n          } else {\n            MT.core.getEl(arguments[i]).style.display = '';\n          }\n        }\n      },\n      \n      hide : function () {\n        var i = arguments.length;\n        while(i--) {\n          if(MT.util.checkNodeType(arguments[i])==='element') {\n            arguments[i].style.display = 'none';\n          } else {\n            MT.core.getEl(arguments[i]).style.display = 'none';\n          }\n        }\n      }\n    },\n    \n    <mt:Ignore>\n    /**\n     * Finds the nearest defining (i.e. with an id) parent to the given element\n     * \n     * @param {HTMLElement} origin the node from which to start the search\n     * @return {HTMLElement|Boolean} The parent node with an id attribute or false\n     */\n    </mt:Ignore>\n    findDefiningParent : function (origin) {\n      if(MT.util.checkNodeType(origin)==='element') {\n        for(var node=origin.parentNode;node.parentNode;node=node.parentNode) {\n          if((node.hasAttribute && node.hasAttribute('id')) || node.getAttribute('id')) {\n            return node;\n          }\n        }\n      }\n      return false;\n    },\n    \n    <mt:Ignore>\n    /**\n     * Tests objects to verify if they are DOM nodes\n     * \n     * @param {Object} obj The object to be tested\n     * @return {String} the values 'element'|'textnode'|'whitespace'\n     */\n    </mt:Ignore>\n    checkNodeType : function (obj) {\n      if (obj && obj.nodeName){\n        switch (obj.nodeType) {\n          case 1: return 'element';\n          case 3: return (/\\S/).test(obj.nodeValue) ? 'textnode' : 'whitespace';\n        }\n      }\n    }\n  }\n}();\n\n<mt:Ignore>\n/**\n * mtPaginateComments takes the currently generated static page and either:\n *  - Attempts to find an individual comment link in the query string\n *  - If no link is found, the static page loads\n * In either case, the pagination event is set\n */\n</mt:Ignore>\n(function () {\n  var M = MT.core,\n      c = MT.cons,\n      u = MT.util,\n      cache,\n      isLoading,\n      direction,\n      currentComments,\n      commentAnchor,\n      commentArrId,\n      commentsPerPage,\n      commentsTotalPages,\n      loadingIcon,\n      pageNum,\n      commentsOffset,\n      totalComments,\n      entryID,\n      commentContentDiv,\n      topNav,\n      nav,\n      currentCommentsSpan,\n      topCurrentCommentsSpan;\n            \n  M.addEvent(window,'load',_init);\n  \n  /**\n   * Initializes the class\n   * \n   * @return void\n   */\n  function _init () {\n    if(!MT.entryCommentCount) {\n      return;\n    }\n    \n    _initializeVariables();\n    _setCommentOffset(false);\n    _checkForAnchor();\n\t\t_setCurrentComments();\n    _toggleNavLinks();\n    _initializeEvents();\n  }\n  \n  <mt:Ignore>\n  /**\n   * Initializes variables to their initial values\n   * \n   * @return void\n   */\n  </mt:Ignore>\n  function _initializeVariables() {\n    cache = {};\n    isLoading = false;\n    commentAnchor = '';\n    commentArrId = '';\n    commentsPerPage = MT.commentsPerPage || 50;\n    currentComments = '';\n    direction = 'ascend';\n    entryID = MT.entryID;\n    totalComments = MT.entryCommentCount;\n    commentsTotalPages = Math.ceil(totalComments / commentsPerPage);\n    pageNum = 1;\n    \n    loadingIcon = \"<img title='Loading...' src='<$MTStaticWebPath$>images/indicator.white.gif' alt='Loading' />\";\n    \n    commentContentDiv = M.getEl(\"comments-content\");\n    topNav = M.getEl(\"top-comment-nav\");\n    nav = M.getEl(\"comment-nav\");\n    \n    currentCommentsSpan = M.getEl(\"current-comments\");\n    topCurrentCommentsSpan = M.getEl(\"top-current-comments\");\n  }\n  \n  function _initializeEvents() {\n    if (commentsPerPage < totalComments) {\n      M.addEvent(nav,'click',_handleEvents);\n      M.addEvent(topNav,'click',_handleEvents);\n    }\n  }\n  \n  <mt:Ignore>\n  /**\n   * Checks for an existing anchor tag in the query string\n   * If found, it looks for it on the current page\n   * If that fails, it tries to find it in comment list and loads\n   * the desired page\n   * \n   * @return void\n   */\n  </mt:Ignore>\n  function _checkForAnchor() {\n    var found = String(window.location.hash).match( /comment-(\\d{1,6})/ );\n\t\t\n\t\tif (found) {\n\t\t  M.log(c.DEBUG,found);\n\t\t\tif (!Object.prototype.hasOwnProperty.call(M.getEl(found[0]), 'className')) {\n\t\t\t\tif (_findIdMatch(found[1])) {\n    \t\t\tpageNum = Math.floor(commentArrId / commentsPerPage) + 1;\n    \t\t\tM.log(c.DEBUG,'Comment Array Id: ' + commentArrId);\n    \t\t\tM.log(c.DEBUG,'Comments Per Page: ' + commentsPerPage);\n    \t\t\tM.log(c.DEBUG,'Page Number: ' + pageNum);\n    \t\t\tM.log(c.DEBUG,'Comment Offset: ' + _getCommentOffset());\n    \t\t\t_updateComments();\n    \t\t}\n\t\t\t}\n\t\t}\n  }\n  \n  <mt:Ignore>\n  /**\n   * Sets commentsOffset (i.e. the offset number to the remote list)\n   * \n   * @return void\n   */\n  </mt:Ignore>\n  function _setCommentOffset() {\n    commentsOffset = commentsPerPage * (pageNum-1);\n  }\n  \n  <mt:Ignore>\n  /**\n   * Gets the commentsOffset (i.e. the offset number to the remote list)\n   * \n   * @return void\n   */\n  </mt:Ignore>\n  function _getCommentOffset() {\n    return commentsOffset;\n  }\n  \n  <mt:Ignore>\n  /**\n   * General event handler\n   * \n   * @param {Event} e The event object\n   * @return void\n   */\n  </mt:Ignore>\n  function _handleEvents (e) {\n    var origin = e.target || e.srcElement,\n        parentId;\n        \n    // stupid IE\n    origin = origin.id && M.getEl(origin.id) || false;\n\n    if(origin) {\n      parentId = u.checkNodeType(origin.parentNode)==='element' && origin.parentNode.getAttribute('id') && origin.parentNode.id;\n    } else {\n      return false;\n    }\n    \n    switch(origin.nodeName) {\n      case 'A':\n        switch (parentId) {\n          case 'prev-comments':\n          case 'top-prev-comments':\n            if(e.preventDefault) {\n              e.preventDefault();\n            } else {\n              e.returnValue =\tfalse;\n            }\n            if(!isLoading) {\n              _previousPage();\n            }\n            break;\n          case 'next-comments':\n          case 'top-next-comments':\n            if(e.preventDefault) {\n              e.preventDefault();\n            } else {\n              e.returnValue =\tfalse;\n            }\n            if(!isLoading) {\n              _nextPage();\n            }\n            break;\n        }\n        break;\n    }\n  }\n  \n  <mt:Ignore>\n  /**\n   * Toggles the visibility of the navigation links\n   * \n   * @return void\n   */\n  </mt:Ignore>\n  function _toggleNavLinks () {\n    M.log(c.DEBUG,M.getEl('top-prev-comments'));\n    if(pageNum <= commentsTotalPages && pageNum !== 1) {\n      u.toggleVisibility.show('prev-comments');\n      u.toggleVisibility.show('top-prev-comments');\n    }\n    \n    if(pageNum >= 1 && pageNum !== commentsTotalPages) {\n      u.toggleVisibility.show('next-comments');\n      u.toggleVisibility.show('top-next-comments');\n    }\n    \n    if(pageNum===1 || nav.style.visibility==='hidden') {\n      u.toggleVisibility.hide('prev-comments');\n      u.toggleVisibility.hide('top-prev-comments');\n    }\n    \n    if(pageNum===commentsTotalPages || nav.style.visibility==='hidden') {\n      u.toggleVisibility.hide('next-comments');\n      u.toggleVisibility.hide('top-next-comments');\n    }\n  }\n  \n  <mt:Ignore>\n  /**\n   * Determines appropriate action based on the id of the parent\n   * clicked link. Decrements pageNum based on id.\n   * \n   * @param {String} id the id of the parent of the clicked link\n   * @return void\n   */\n  </mt:Ignore>\n  function _nextPage () {\n    if(pageNum < commentsTotalPages) {\n      pageNum++;\n      _updateComments();\n    }\n  }\n  \n  <mt:Ignore>\n  /**\n   * Determines appropriate action based on the id of the parent\n   * clicked link. Increments/decrements pageNum based on id.\n   * \n   * @param {String} id the id of the parent of the clicked link\n   * @return void\n   */\n  </mt:Ignore>\n  function _previousPage() {\n    if(pageNum > 1) {\n      pageNum--;\n      _updateComments();\n    }\n  }\n  \n  <mt:Ignore>\n  /**\n   * Searches for a particular comment in the list of ids\n   * \n   * @param {String} id The id for which to search\n   * @return {Boolean} true, if found, false otherwise\n   */\n  </mt:Ignore>\n  function _findIdMatch (id) {\n    var len = MT.commentIds.length;\n    \n  \twhile (len--) {\n  \t\tif (MT.commentIds[len] == id) {\n  \t\t\tcommentAnchor = \"comment-\" + id;\n  \t\t\tcommentArrId = len;\n  \t\t\treturn true;\n  \t\t}\n  \t}\n  \t\n  \treturn false;\n  }\n  \n  <mt:Ignore>\n  /**\n   * Sets the current comment counts on the page\n   *\n   * @return void\n   */\n  </mt:Ignore>\n  function _setCurrentComments() {\n    var commentsOnPage = pageNum != commentsTotalPages ? commentsOffset + commentsPerPage : totalComments;\n    \n    _setCurrentCommentsContent([commentsOffset+1,\" - \",commentsOnPage].join(''));\n  }\n  \n  <mt:Ignore>\n  /**\n   * Sets the \"current-comments\" element with the HTML value\n   * \n   * @param {String|Element} currentCommentsHTML The content to be set\n   * @return void\n   */\n  </mt:Ignore>\n  function _setCurrentCommentsContent(currentCommentsHTML) {\n    currentCommentsSpan.innerHTML = currentCommentsHTML;\n    topCurrentCommentsSpan.innerHTML = currentCommentsHTML;\n  }\n  \n  <mt:Ignore>\n  /**\n   * Sets the content of the comment list\n   * \n   * @param {String|Element} commentHTML The content to be set \n   * @return void\n   */\n  </mt:Ignore>\n  function _setCommentContent(commentHTML) {\n    commentContentDiv.innerHTML = commentHTML;\n  }\n  \n  <mt:Ignore>\n  /**\n   * Builds the appropriate URL to make a remote call to get the\n   * next set of comments\n   * \n   * @return void\n   */\n  </mt:Ignore>\n  function _updateComments() {\n    var comments, jsonUrl;\n    isLoading = true;\n    _setCurrentCommentsContent(loadingIcon);\n    _setCommentOffset();\n    \n    jsonUrl = [\n        \"<$mt:CGIPath$><$mt:CommentScript$>?__mode=comment_listing&direction=\",\n        direction,\n        \"&entry_id=\",\n        entryID,\n        \"&limit=\",\n        commentsPerPage,\n        \"&offset=\",\n        _getCommentOffset()\n      ].join('');\n  \t\n  \tif (!commentAnchor) {\n      commentAnchor = \"comments-content\";\n    }\n    \n    if(cache.hasOwnProperty(jsonUrl)) {\n      _refreshComments(cache[jsonUrl]);\n      isLoading = false;\n    } else {\n      M.connect(jsonUrl,c.JSON,function (json) {\n        cache[jsonUrl] = json.comments;\n    \t  _refreshComments(json.comments);\n    \t  isLoading = false;\n      });\n    }\n  }\n  \n  <mt:Ignore>\n  /**\n   * Refreshes the comment data with the current\n   * \n   * @param {String} commentData The data used to replace current comments\n   * @return void\n   */\n  </mt:Ignore>\n  function _refreshComments(commentData) {\n    _setCommentContent(commentData);\n    _setCurrentComments();\n    window.location.hash = 'reset';\n    window.location.hash = commentAnchor;\n    _toggleNavLinks();\n  }\n})();\n\n<mt:Ignore>\n/***\n * Displays a relative date.\n * 'ts' is a Date object, 'fds' is a string of the date which\n * will be displayed if the given date is older than 1 week.\n */\n</mt:Ignore>\nfunction mtRelativeDate(ts, fds) {\n    var now = new Date();\n    var ref = ts;\n    var delta = Math.floor((now.getTime() - ref.getTime()) / 1000);\n\n    var str;\n    if (delta < 60) {\n        str = '直前';\n    } else if (delta <= 86400) {\n        // less than 1 day\n        var hours = Math.floor(delta / 3600);\n        var min = Math.floor((delta % 3600) / 60);\n        if (hours == 1)\n            str = '1 時間前';\n        else if (hours > 1)\n            str = '2 時間前'.replace(/2/, hours);\n        else if (min == 1)\n            str = '1 分前';\n        else\n            str = '2 分前'.replace(/2/, min);\n    } else if (delta <= 604800) {\n        // less than 1 week\n        var days = Math.floor(delta / 86400);\n        var hours = Math.floor((delta % 86400) / 3600);\n        if (days == 1)\n            str = '1 日前';\n        else if (days > 1)\n            str = '2 日前'.replace(/2/, days);\n        else if (hours == 1)\n            str = '1 時間前';\n        else\n            str = '2 時間前'.replace(/2/, hours);\n    }\n    return str ? str : fds;\n}\n\n<mt:Ignore>\n/***\n * Used to display an edit link for the given entry.\n */\n</mt:Ignore>\nfunction mtEditLink(entry_id, author_id) {\n    <mt:Ignore>\n    // This function has been inactivated by default because of the security issue.\n    // You can activate this function if \"AdminScript\" is already known by visitor.\n    </mt:Ignore>\n    <mt:Ignore>\n\n    var u = mtGetUser();\n    if (! u) return;\n    if (! entry_id) return;\n    if (! author_id) return;\n    if (u.id != author_id) return;\n    var link = '<a href=\"<$mt:AdminScript$>?__mode=view&amp;_type=entry&amp;id=' + entry_id + '\">編集</a>';\n    document.write(link);\n\n    </mt:Ignore>\n}\n\n<mt:Ignore>\n/***\n * Called when an input field on the comment form receives focus.\n */\n</mt:Ignore>\nfunction mtCommentFormOnFocus() {\n    // if CAPTCHA is enabled, this causes the captcha image to be\n    // displayed if it hasn't been already.\n    mtShowCaptcha();\n}\n\n<mt:Ignore>\n/***\n * Displays a captcha field for anonymous commenters.\n */\n</mt:Ignore>\nvar mtCaptchaVisible = false;\nfunction mtShowCaptcha() {\n    var u = mtGetUser();\n    if ( u && u.is_authenticated ) return;\n    if (mtCaptchaVisible) return;\n    var div = document.getElementById('comments-open-captcha');\n    if (div) {\n        div.innerHTML = '<$mt:CaptchaFields$>';\n        mtCaptchaVisible = true;\n    }\n}\n\n<mt:Ignore>\n/* user object\n    -- saved in user cookie --\n    u.name (display name)\n    u.url (link to home page)\n    u.email (for anonymous only)\n    u.userpic (url for commenter/author)\n    u.profile (link to profile)\n    u.is_trusted (boolean)\n    u.is_author (user has posting rights)\n    u.is_banned (banned status; neither post/comment perms)\n    u.can_post (has permission to post)\n    u.can_comment (has permission to comment)\n\n    -- status fields --\n    u.is_authenticated (boolean)\n    u.is_anonymous (user is anonymous)\n*/\n</mt:Ignore>\n\nvar is_preview;\nvar user;\n<mt:Ignore>\n/***\n * Assigns a user object as the actively logged in user; also saves the\n * user information in a browser cookie.\n */\n</mt:Ignore>\nfunction mtSetUser(u) {\n    if (u) {\n        // persist this\n        user = u;\n        mtSaveUser();\n        // sync up user greeting\n        mtFireEvent('usersignin');\n    }\n}\n\n<mt:Ignore>\n/***\n * Simple function that escapes single quote characters for storing\n * in a cookie.\n */\n</mt:Ignore>\nfunction mtEscapeJS(s) {\n    s = s.replace(/'/g, \"&apos;\");\n    return s;\n}\n\n<mt:Ignore>\n/***\n * Simple function that unescapes single quote characters that were\n * stored in a cookie.\n */\n</mt:Ignore>\nfunction mtUnescapeJS(s) {\n    s = s.replace(/&apos;/g, \"'\");\n    return s;\n}\n\n<mt:Ignore>\n/***\n * Serializes a user object into a string, suitable for storing as a cookie.\n */\n</mt:Ignore>\nfunction mtBakeUserCookie(u) {\n    var str = \"\";\n    if (u.name) str += \"name:'\" + mtEscapeJS(u.name) + \"';\";\n    if (u.url) str += \"url:'\" + mtEscapeJS(u.url) + \"';\";\n    if (u.email) str += \"email:'\" + mtEscapeJS(u.email) + \"';\";\n    if (u.is_authenticated) str += \"is_authenticated:'1';\";\n    if (u.profile) str += \"profile:'\" + mtEscapeJS(u.profile) + \"';\";\n    if (u.userpic) str += \"userpic:'\" + mtEscapeJS(u.userpic) + \"';\";\n    if (u.sid) str += \"sid:'\" + mtEscapeJS(u.sid) + \"';\";\n    str += \"is_trusted:'\" + (u.is_trusted ? \"1\" : \"0\") + \"';\";\n    str += \"is_author:'\" + (u.is_author ? \"1\" : \"0\") + \"';\";\n    str += \"is_banned:'\" + (u.is_banned ? \"1\" : \"0\") + \"';\";\n    str += \"can_post:'\" + (u.can_post ? \"1\" : \"0\") + \"';\";\n    str += \"can_comment:'\" + (u.can_comment ? \"1\" : \"0\") + \"';\";\n    str = str.replace(/;$/, '');\n    return str;\n}\n\n<mt:Ignore>\n/***\n * Unserializes a user cookie and returns a user object with the restored\n * state.\n */\n</mt:Ignore>\nfunction mtUnbakeUserCookie(s) {\n    if (!s) return;\n\n    var u = {};\n    var m;\n    while (m = s.match(/^((name|url|email|is_authenticated|profile|userpic|sid|is_trusted|is_author|is_banned|can_post|can_comment):'([^']+?)';?)/)) {\n        s = s.substring(m[1].length);\n        if (m[2].match(/^(is|can)_/)) // boolean fields\n            u[m[2]] = m[3] == '1' ? true : false;\n        else\n            u[m[2]] = mtUnescapeJS(m[3]);\n    }\n    if (u.is_authenticated) {\n        u.is_anonymous = false;\n    } else {\n        u.is_anonymous = true;\n        u.can_post = false;\n        u.is_author = false;\n        u.is_banned = false;\n        u.is_trusted = false;\n    }\n    return u;\n}\n\n<mt:Ignore>\n/***\n * Retrieves an object of the currently logged in user's state.\n * If no user is logged in or cookied, this will return null.\n */\n</mt:Ignore>\nfunction mtGetUser() {\n    if (!user) {\n        var cookie = mtGetCookie(mtCookieName);\n        if (!cookie) return;\n        user = mtUnbakeUserCookie(cookie);\n        if (! user) {\n            user = {};\n            user.is_anonymous = true;\n            user.can_post = false;\n            user.is_author = false;\n            user.is_banned = false;\n            user.is_trusted = false;\n        }\n    }\n    return user;\n}\n\n<mt:Ignore>\n/***\n * Issues a request to the MT comment script to retrieve the currently\n * logged-in user (if any).\n */\n</mt:Ignore>\nvar mtFetchedUser = false;\nfunction mtFetchUser(cb) {\n    if (!cb) cb = 'mtSetUser';\n    if ( ( cb == 'mtSetUser' ) && mtGetUser() ) {\n        var url = document.URL;\n        url = url.replace(/#.+$/, '');\n        url += '#comments-form';\n        location.href = url;\n    } else {\n        // we aren't using AJAX for this, since we may have to request\n        // from a different domain. JSONP to the rescue.\n        mtFetchedUser = true;\n        var u = mtGetUser();\n        var script = document.createElement('script');\n        var ts = new Date().getTime();\n        script.src = '<$mt:CGIPath$><$mt:CommentScript$>?__mode=userinfo&blog_id=<$mt:BlogID$>&jsonp=' + cb + '&ts=' + ts + '&sid=' + u.sid;\n        (document.getElementsByTagName('head'))[0].appendChild(script);\n    }\n}\n\nfunction mtVerifySession(cb) {\n    if (!cb) return;\n    var script = document.createElement('script');\n    var ts = new Date().getTime();\n    var u = mtGetUser();\n    script.src = '<$mt:CGIPath$><$mt:CommentScript$>?__mode=verify_session&blog_id=<$mt:BlogID$>&jsonp=' + cb + '&ts=' + ts + '&sid=' + u.sid;\n    (document.getElementsByTagName('head'))[0].appendChild(script);\n}\n\n<mt:Ignore>\n/***\n * Called when the 'Remember me' checkbox is changed. If the checkbox\n * is cleared, the cached user cookie is immediately cleared.\n */\n</mt:Ignore>\nfunction mtRememberMeOnClick(b) {\n    if (!b.checked)\n        mtClearUser(b.form);\n    return true;\n}\n\n<mt:Ignore>\n/***\n * Called when comment form is sent.\n * Required parameter: Form DOM object of comment form.\n * If form has a 'bakecookie' member, it will be used to signal\n * storing the anonymous commenter information to a cookie.\n * If form has a 'armor' member, it will be used to store\n * a token that is checked by the comment script.\n */\n</mt:Ignore>\nvar mtRequestSubmitted = false;\nfunction mtCommentOnSubmit(f) {\n    if (!mtRequestSubmitted) {\n        mtRequestSubmitted = true;\n\n        if (f.armor)\n            f.armor.value = '<$mt:BlogSitePath encode_sha1=\"1\"$>';\n        if (f.bakecookie && f.bakecookie.checked)\n            mtSaveUser(f);\n\n        // disable submit buttons\n        if (f.preview_button) f.preview_button.disabled = true;\n        if (f.post) f.post.disabled = true;\n\n        var u = mtGetUser();\n        if ( !is_preview && ( u && u.is_authenticated ) ) {\n            // validate session; then submit\n            mtVerifySession('mtCommentSessionVerify');\n            return false;\n        }\n\n        return true;\n    }\n    return false;\n}\n\nfunction mtCommentSessionVerify(app_user) {\n    var f = document['comments_form'];\n    if ( app_user && app_user.verified ) {\n        f.submit();\n    } else {\n        alert('セッションの有効期限が切れています。再度サインインしてください。');\n        mtClearUser();\n        mtFireEvent('usersignin');\n<mt:IfRegistrationRequired>\n        mtShow('comments-form');\n        mtHide('comments-open-footer');\n</mt:IfRegistrationRequired>\n    }\n}\n\nfunction mtUserOnLoad() {\n    var u = mtGetUser();\n\n    // if the user is authenticated, hide the 'anonymous' fields\n    // and any captcha input if already shown\n    if ( document.getElementById('comments-form')) {\n        if ( u && u.is_authenticated ) {\n            mtShow('comments-form');\n            mtHide('comments-open-data');\n            if (mtCaptchaVisible)\n                mtHide('comments-open-captcha');\n        } else {\n<mt:IfRegistrationRequired>\n            mtHide('comments-form');\n</mt:IfRegistrationRequired>\n        }\n        if ( u && u.is_banned )\n            mtHide('comments-form');\n\n        // if we're previewing a comment, make sure the captcha\n        // field is visible\n        if (is_preview)\n            mtShowCaptcha();\n        else\n            mtShowGreeting();\n\n        // populate anonymous comment fields if user is cookied as anonymous\n        var cf = document['comments_form'];\n        if (cf) {\n            if (u && u.is_anonymous) {\n                if (u.email) cf.email.value = u.email;\n                if (u.name) cf.author.value = u.name;\n                if (u.url) cf.url.value = u.url;\n                if (cf.bakecookie)\n                    cf.bakecookie.checked = u.name || u.email;\n            } else {\n                if (u && u.sid && cf.sid)\n                    cf.sid.value = u.sid;\n            }\n            if (cf.post && cf.post.disabled)\n                cf.post.disabled = false;\n            if (cf.preview_button && cf.preview_button.disabled)\n                cf.preview_button.disabled = false;\n            mtRequestSubmitted = false;\n        }\n    }\n}\n\n<mt:Ignore>\n/***\n * Called when an entry archive page is loaded.\n * This routine controls which elements of the comment form are shown\n * or hidden, depending on commenter type and blog configuration.\n */\n</mt:Ignore>\nfunction mtEntryOnLoad() {\n    var cf = document['comments_form'];\n    if (cf && cf.preview) cf.preview.value = '';\n    <mt:Unless tag=\"IfPingsAccepted\">mtHide('trackbacks-info');</mt:Unless>\n    <mt:Unless tag=\"IfCommentsAccepted\">mtHide('comment-greeting');\n    mtHide('comments-form');</mt:Unless>\n    mtFireEvent('usersignin');\n}\n\nfunction mtEntryOnUnload() {\n    if (mtRequestSubmitted) {\n        var cf = document['comments_form'];\n        if (cf) {\n            if (cf.post && cf.post.disabled)\n                cf.post.disabled = false;\n            if (cf.preview_button && cf.preview_button.disabled)\n                cf.preview_button.disabled = false;\n        }\n        mtRequestSubmitted = false;\n    }\n    return true;\n}\n\nmtAttachEvent('usersignin', mtUserOnLoad);\n\n<mt:Ignore>\n/***\n * Handles the action of the \"Sign in\" link. First clears any existing\n * user cookie, then directs to the MT comment script to sign the user in.\n */\n</mt:Ignore>\nfunction mtSignIn() {\n    var doc_url = document.URL;\n    doc_url = doc_url.replace(/#.+/, '');\n    var url = '<$mt:SignInLink$>';\n    if (is_preview) {\n        if ( document['comments_form'] ) {\n            var entry_id = document['comments_form'].entry_id.value;\n            url += '&entry_id=' + entry_id;\n        } else {\n            url += '&return_url=<$mt:BlogURL encode_url=\"1\"$>';\n        }\n    } else {\n        url += '&return_url=' + encodeURIComponent(doc_url);\n    }\n    mtClearUser();\n    location.href = url;\n}\n\nfunction mtSignInOnClick(sign_in_element) {\n    var el;\n    if (sign_in_element) {\n        // display throbber\n        el = document.getElementById(sign_in_element);\n        if (!el)  // legacy MT 4.x element id\n            el = document.getElementById('comment-form-external-auth');\n    }\n    if (el)\n        el.innerHTML = 'サインインします... <span class=\"status-indicator\">&nbsp;</span>';\n\n    mtClearUser(); // clear any 'anonymous' user cookie to allow sign in\n    mtSignIn();\n    return false;\n}\n\nfunction mtSetUserOrLogin(u) {\n    if (u && u.is_authenticated) {\n        mtSetUser(u);\n    } else {\n        // user really isn't logged in; so let's do this!\n        mtSignIn();\n    }\n}\n\n<mt:Ignore>\n/***\n * Handles sign out from the web site.\n * First clears any existing user cookie, then direts to the MT comment\n * script to sign the user out.\n */\n</mt:Ignore>\nfunction mtSignOut(entry_id) {\n    mtClearUser();\n    var doc_url = document.URL;\n    doc_url = doc_url.replace(/#.+/, '');\n    var url = '<$mt:SignOutLink$>';\n    if (is_preview) {\n        if ( document['comments_form'] ) {\n            var entry_id = document['comments_form'].entry_id.value;\n            url += '&entry_id=' + entry_id;\n        } else {\n            url += '&return_url=<$mt:BlogURL encode_url=\"1\"$>';\n        }\n    } else {\n        url += '&return_url=' + encodeURIComponent(doc_url);\n    }\n    location.href = url;\n}\n\n<mt:Ignore>\n/***\n * Handles the action of the \"Sign out\" link.\n */\n</mt:Ignore>\nfunction mtSignOutOnClick() {\n    mtSignOut();\n    return false;\n}\n\n<mt:Ignore>\n/***\n * Handles the display of the greeting message, depending on what kind of\n * user is logged in and blog comment policy.\n */\n</mt:Ignore>\nfunction mtShowGreeting() {\n<mt:IfRegistrationAllowed>\n    var reg_reqd = <mt:IfRegistrationRequired>true<mt:Else>false</mt:IfRegistrationRequired>;\n\n    var cf = document['comments_form'];\n    if (!cf) return;\n\n    var el = document.getElementById('comment-greeting');\n    if (!el)  // legacy MT 4.x element id\n        el = document.getElementById('comment-form-external-auth');\n    if (!el) return;\n\n    var eid = cf.entry_id;\n    var entry_id;\n    if (eid) entry_id = eid.value;\n\n    var phrase;\n    var u = mtGetUser();\n\n    if ( u && u.is_authenticated ) {\n        if ( u.is_banned ) {\n            phrase = 'このブログにコメントする権限を持っていません。(\\<a href=\\\"javas\\cript:void(0);\\\" onclick=\\\"return mtSignOutOnClick();\\\"\\>サインアウトする\\<\\/a\\>)';\n        } else {\n            var user_link;\n            if ( u.is_author ) {\n                user_link = '<a href=\"<$mt:CGIPath$><$mt:CommentScript$>?__mode=edit_profile&blog_id=<mt:BlogID>&return_url=' + encodeURIComponent( location.href );\n                user_link += '\">' + u.name + '</a>';\n            } else {\n                // registered user, but not a user with posting rights\n                if (u.url)\n                    user_link = '<a href=\"' + u.url + '\">' + u.name + '</a>';\n                else\n                    user_link = u.name;\n            }\n            // TBD: supplement phrase with userpic if one is available.\n            phrase = '__NAME__としてサインインしています。(\\<a href=\\\"javas\\cript:void(0)\\\" onclick=\\\"return mtSignOutOnClick();\\\"\\>サインアウト\\<\\/a\\>)';\n            phrase = phrase.replace(/__NAME__/, user_link);\n        }\n    } else {\n        if (reg_reqd) {\n            phrase = 'コメントするにはまず\\<a href=\\\"javas\\cript:void(0)\\\" onclick=\\\"return mtSignInOnClick(\\'comment-greeting\\')\\\"\\>サインイン\\<\\/a\\>してください。';\n        } else {\n            phrase = 'コメントする前に\\<a href=\\\"javas\\cript:void(0)\\\" onclick=\\\"return mtSignInOnClick(\\'comment-greeting\\')\\\"\\>サインイン\\<\\/a\\>することもできます。';\n        }\n    }\n    el.innerHTML = phrase;\n<mt:Else>\n    mtShowCaptcha();\n</mt:IfRegistrationAllowed>\n}\n\n<mt:Ignore>\n/***\n * Handles the action of the 'Reply' links.\n */\n</mt:Ignore>\nfunction mtReplyCommentOnClick(parent_id, author) {\n    mtShow('comment-form-reply');\n\n    var checkbox = document.getElementById('comment-reply');\n    var label = document.getElementById('comment-reply-label');\n    var text = document.getElementById('comment-text');\n\n    // Populate label with new values\n    var reply_text = '\\<a href=\\\"#comment-__PARENT__\\\" onclick=\\\"location.href=this.href; return false\\\"\\>__AUTHOR__からのコメント\\<\\/a\\>に返信';\n    reply_text = reply_text.replace(/__PARENT__/, parent_id);\n    reply_text = reply_text.replace(/__AUTHOR__/, author);\n    label.innerHTML = reply_text;\n\n    checkbox.value = parent_id; \n    checkbox.checked = true;\n    try {\n        // text field may be hidden\n        text.focus();\n    } catch(e) {\n    }\n\n    mtSetCommentParentID();\n}\n\n<mt:Ignore>\n/***\n * Sets the parent comment ID when replying to a comment.\n */\n</mt:Ignore>\nfunction mtSetCommentParentID() {\n    var checkbox = document.getElementById('comment-reply');\n    var parent_id_field = document.getElementById('comment-parent-id');\n    if (!checkbox || !parent_id_field) return;\n\n    var pid = 0;\n    if (checkbox.checked == true)\n        pid = checkbox.value;\n    parent_id_field.value = pid;\n}\n\n<mt:Ignore>\n/***\n * Persists a copy of the current user cookie into the browser cookie stash.\n */\n</mt:Ignore>\nfunction mtSaveUser(f) {\n    // We can't reliably store the user cookie during a preview.\n    if (is_preview) return;\n\n    var u = mtGetUser();\n\n    if (f && (!u || u.is_anonymous)) {\n        if ( !u ) {\n            u = {};\n            u.is_authenticated = false;\n            u.can_comment = true;\n            u.is_author = false;\n            u.is_banned = false;\n            u.is_anonymous = true;\n            u.is_trusted = false;\n        }\n        if (f.author != undefined) u.name = f.author.value;\n        if (f.email != undefined) u.email = f.email.value;\n        if (f.url != undefined) u.url = f.url.value;\n    }\n\n    if (!u) return;\n\n    var cache_period = mtCookieTimeout * 1000;\n\n    // cache anonymous user info for a long period if the\n    // user has requested to be remembered\n    if (u.is_anonymous && f && f.bakecookie && f.bakecookie.checked)\n        cache_period = 365 * 24 * 60 * 60 * 1000;\n\n    var now = new Date();\n    mtFixDate(now);\n    now.setTime(now.getTime() + cache_period);\n\n    var cmtcookie = mtBakeUserCookie(u);\n    mtSetCookie(mtCookieName, cmtcookie, now, mtCookiePath, mtCookieDomain,\n        location.protocol == 'https:');\n}\n\n<mt:Ignore>\n/***\n * Clears the blog-side user cookie.\n */\n</mt:Ignore>\nfunction mtClearUser() {\n    user = null;\n    mtDeleteCookie(mtCookieName, mtCookiePath, mtCookieDomain,\n        location.protocol == 'https:');\n}\n\n<mt:Ignore>\n/***\n * Sets a browser cookie.\n */\n</mt:Ignore>\nfunction mtSetCookie(name, value, expires, path, domain, secure) {\n    if (domain && ( domain.match(/^\\.?localhost$/) || domain.match(/^[0-9\\.]+$/) ))\n        domain = null;\n    var curCookie = name + \"=\" + encodeURIComponent(value) +\n        (expires ? \"; expires=\" + expires.toGMTString() : \"\") +\n        (path ? \"; path=\" + path : \"\") +\n        (domain ? \"; domain=\" + domain : \"\") +\n        (secure ? \"; secure\" : \"\");\n    document.cookie = curCookie;\n}\n\n<mt:Ignore>\n/***\n * Retrieves a browser cookie.\n */\n</mt:Ignore>\nfunction mtGetCookie(name) {\n    var prefix = name + '=';\n    var c = document.cookie;\n    var cookieStartIndex = c.indexOf(prefix);\n    if (cookieStartIndex == -1)\n        return '';\n    var cookieEndIndex = c.indexOf(\";\", cookieStartIndex + prefix.length);\n    if (cookieEndIndex == -1)\n        cookieEndIndex = c.length;\n    var this_cookie = c.substring(cookieStartIndex + prefix.length, cookieEndIndex);\n    if ( this_cookie.match(/\\%u/i) ) {\n        return '';\n    }\n    return decodeURIComponent( this_cookie );\n}\n\n<mt:Ignore>\n/***\n * Deletes a browser cookie.\n */\n</mt:Ignore>\nfunction mtDeleteCookie(name, path, domain, secure) {\n    if (mtGetCookie(name)) {\n        if (domain && domain.match(/^\\.?localhost$/))\n            domain = null;\n        document.cookie = name + \"=\" +\n            (path ? \"; path=\" + path : \"\") +\n            (domain ? \"; domain=\" + domain : \"\") +\n            (secure ? \"; secure\" : \"\") +\n            \"; expires=Thu, 01-Jan-70 00:00:01 GMT\";\n    }\n}\n\nfunction mtFixDate(date) {\n    var skew = (new Date(0)).getTime();\n    if (skew > 0)\n        date.setTime(date.getTime() - skew);\n}\n\n<mt:Ignore>\n/***\n * Returns a XMLHttpRequest object (for Ajax operations).\n */\n</mt:Ignore>\nfunction mtGetXmlHttp() {\n    if ( !window.XMLHttpRequest ) {\n        window.XMLHttpRequest = function() {\n            var types = [\n                \"Microsoft.XMLHTTP\",\n                \"MSXML2.XMLHTTP.5.0\",\n                \"MSXML2.XMLHTTP.4.0\",\n                \"MSXML2.XMLHTTP.3.0\",\n                \"MSXML2.XMLHTTP\"\n            ];\n\n            for ( var i = 0; i < types.length; i++ ) {\n                try {\n                    return new ActiveXObject( types[ i ] );\n                } catch( e ) {}\n            }\n\n            return undefined;\n        };\n    }\n    if ( window.XMLHttpRequest )\n        return new XMLHttpRequest();\n}\n\n// BEGIN: fast browser onload init\n// Modifications by David Davis, DWD\n// Dean Edwards/Matthias Miller/John Resig\n// http://dean.edwards.name/weblog/2006/06/again/?full#comment5338\n\nfunction mtInit() {\n    // quit if this function has already been called\n    if (arguments.callee.done) return;\n\n    // flag this function so we don't do the same thing twice\n    arguments.callee.done = true;\n\n    // kill the timer\n    // DWD - check against window\n    if ( window._timer ) clearInterval(window._timer);\n\n    // DWD - fire the window onload now, and replace it\n    if ( window.onload && ( window.onload !== window.mtInit ) ) {\n        window.onload();\n        window.onload = function() {};\n    }\n<mt:IfRegistrationAllowed>\n    mtInitCommenter();\n</mt:IfRegistrationAllowed>\n}\n\n/* for Mozilla/Opera9 */\nif (document.addEventListener) {\n    document.addEventListener(\"DOMContentLoaded\", mtInit, false);\n}\n\n/* for Internet Explorer */\n/*@cc_on @*/\n/*@if (@_win32)\nif (!document.addEventListener){\n  document.write(\"<script id=__ie_onload defer src=//:><\\/script>\");\n  var script = document.getElementById(\"__ie_onload\");\n  script.onreadystatechange = function() {\n      if (this.readyState == \"complete\") {\n          mtInit(); // call the onload handler\n      }\n  };\n}\n/*@end @*/\n\n/* for Safari */\nif (/WebKit/i.test(navigator.userAgent)) { // sniff\n    _timer = setInterval(function() {\n        if (/loaded|complete/.test(document.readyState)) {\n            mtInit(); // call the onload handler\n        }\n    }, 10);\n}\n\n/* for other browsers */\nwindow.onload = mtInit;\n\n// END: fast browser onload init\n\n<mt:IfRegistrationAllowed>\n\nfunction mtLoggedIn(ott) {\n    var script = document.createElement('script');\n    var ts = new Date().getTime();\n    script.src = '<$mt:CGIPath$><$mt:CommentScript$>?__mode=userinfo&jsonp=mtSaveUserInfo&ott=' + ott;\n    (document.getElementsByTagName('head'))[0].appendChild(script);\n}\n\nfunction mtRefreshUserInfo(sid) {\n    var script = document.createElement('script');\n    var ts = new Date().getTime();\n    script.src = '<$mt:CGIPath$><$mt:CommentScript$>?__mode=userinfo&jsonp=mtSaveUserInfo&sid=' + sid;\n    (document.getElementsByTagName('head'))[0].appendChild(script);\n}\n\nfunction mtSaveUserInfo (u) {\n    if ( u.error ) {\n        if ( !user ) {\n            alert('サインインできませんでした。');\n        }\n        return;\n    }\n    user = null;\n    var cmtcookie = mtBakeUserCookie(u);\n    var now = new Date();\n    var cache_period = mtCookieTimeout * 1000;\n\n    // cache anonymous user info for a long period if the\n    // user has requested to be remembered\n    mtFixDate(now);\n    now.setTime(now.getTime() + cache_period);\n    mtSetCookie(mtCookieName, cmtcookie, now, mtCookiePath, mtCookieDomain,\n        location.protocol == 'https:');\n    mtFireEvent('usersignin');\n}\n\nfunction mtInitCommenter () {\n    /***\n     * If request contains a '#_login' or '#_logout' hash, use this to\n     * also delete the blog-side user cookie, since we're coming back from\n     * a login, logout or edit profile operation.\n     */\n\n    var hash = ( window.location.hash );\n    hash.match( /^#_(.*)$/ );\n    var command = RegExp.$1 || '';\n    if ( command === 'refresh' ) {\n        // Back from profile edit screen.\n        // Reload userinfo with current session ID.\n        var u = mtGetUser();\n        user  = null;\n        mtRefreshUserInfo(u.sid);\n    }\n    else if ( command === 'logout' ) {\n        // clear any logged in state\n        mtClearUser();\n        mtFireEvent('usersignin');\n    }\n    else if ( command.match( /^login_(.*)$/ ) ) {\n        var sid = RegExp.$1;\n        mtLoggedIn(sid);\n    }\n    else {\n        mtFireEvent('usersignin');\n    }\n}\n</mt:IfRegistrationAllowed>\n"
type: index
